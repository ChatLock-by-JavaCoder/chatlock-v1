 <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Chat with <%= user.username %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: { 500: '#3B82F6', 600: '#2563EB' },
            secondary: { 100: '#F3F4F6', 200: '#E5E7EB' },
          }
        }
      }
    }
  </script>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    ::-webkit-scrollbar { width: 6px; }
    ::-webkit-scrollbar-thumb { background: #3B82F6; border-radius: 10px; }
    html { scroll-behavior: smooth; }
    .message-enter { opacity: 0; transform: translateY(10px); }
    .message-enter-active { opacity: 1; transform: translateY(0); transition: opacity 300ms, transform 300ms; }
  </style>
</head>

<body class="bg-secondary-100 h-screen flex flex-col font-sans antialiased">

  <!-- Header -->
  <header class="p-4 border-b border-gray-200 bg-white flex items-center justify-between sticky top-0 z-50 shadow-md">
    <div class="flex items-center gap-3">
      <img src="<%= user.profilePic || '/default-avatar.png' %>" alt="<%= user.username %>'s profile picture"
        class="w-10 h-10 rounded-full object-cover border-2 border-white shadow-md" />
      <div class="flex flex-col leading-tight">
        <h1 class="text-base font-semibold text-gray-800"><%= user.fullName || user.username %></h1>
        <% if (user.isOnline == "true") { %>
          <div class="flex items-center">
            <span class="w-2 h-2 rounded-full bg-green-500 mr-1"></span>
            <span class="text-xs text-gray-600 font-medium">Online</span>
          </div>
        <% } else { %>
          <span class="text-xs text-gray-400 font-medium">Last seen <%= user.lastSeen %></span>
        <% } %>
      </div>
    </div>
    <a href="/api/v1/auth/logout" class="text-gray-500 hover:text-primary-500 transition p-1 rounded-full hover:bg-gray-100">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </a>
  </header>

  <!-- Messages -->
  <main id="messages" class="flex-1 overflow-y-auto px-4 py-3 space-y-2 bg-gradient-to-b from-secondary-100 to-white w-full max-w-2xl mx-auto">
    <!-- Appended dynamically -->
  </main>

  <!-- Chat Input -->
  <form id="chatForm" class="flex items-center gap-2 p-3 border-t border-gray-200 bg-white sticky bottom-0 w-full max-w-2xl mx-auto px-4">
    <textarea id="message" placeholder="Type a message..." rows="1" required autocomplete="off"
      class="flex-1 px-4 py-2.5 bg-secondary-100 rounded-3xl text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-primary-500 focus:bg-white transition resize-none placeholder-gray-500"></textarea>
    <button type="submit" class="p-2 bg-primary-500 text-white rounded-full hover:bg-primary-600 shadow-md flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
        <path d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z" />
      </svg>
    </button>
  </form>

  <!-- Scripts -->
  <script>
    const currentUserId = "<%= currentUser._id %>";
    const currentUsername = "<%= currentUser.username %>";
    const currentUserPic = "<%= currentUser.profilePic %>";
    const targetUserId = "<%= user._id %>";
    const targetUserPic = "<%= user.profilePic %>";
    const targetUsername = "<%= user.username %>";

    const socket = io("/ChatLock", { auth: { token: currentUserId } });
    const messagesDiv = document.getElementById('messages');
    const chatForm = document.getElementById('chatForm');
    const messageInput = document.getElementById('message');

    // Auto-resize textarea
    messageInput.addEventListener('input', () => {
      messageInput.style.height = 'auto';
      messageInput.style.height = `${Math.min(messageInput.scrollHeight, 120)}px`;
    });

    // Load chat history
    window.addEventListener("DOMContentLoaded", async () => {
      try {
        const res = await fetch(`/api/v1/user/chat/${currentUserId}/${targetUserId}`);
        const data = await res.json();
        if (data.success) {
          data.messages.forEach(msg => {
            appendMessage(
              msg.sender_id === currentUserId ? currentUsername : targetUsername,
              msg.content || msg.message,
              msg.sender_id === currentUserId,
              msg.sender_id === currentUserId ? currentUserPic : targetUserPic,
              new Date(msg.timestamp)
            );
          });
          scrollToBottom();
        }
      } catch (err) {
        console.error("Chat history error", err);
      }
    });

    // Send message
    chatForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const msg = messageInput.value.trim();
      if (!msg) return;
      const timestamp = new Date();

      const payload = {
        from: currentUserId,
        to: targetUserId,
        message: msg,
        fromName: currentUsername,
        timestamp
      };

      socket.emit("send_message", payload);

      try {
        await fetch('/api/v1/user/save-chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            sender_id: currentUserId,
            receiver_id: targetUserId,
            message: msg,
            timestamp
          })
        });
      } catch (err) {
        console.error("Error saving chat:", err);
      }

      appendMessage(currentUsername, msg, true, currentUserPic, timestamp);
      messageInput.value = '';
      scrollToBottom();
    });

    // Incoming message
    socket.on("loadNewChat", (data) => {
      if (data.from === targetUserId && data.to === currentUserId) {
        appendMessage(targetUsername, data.message, false, targetUserPic, new Date(data.timestamp));
        scrollToBottom();
      }
    });

    // Append message
    function appendMessage(sender, message, isOwn, profilePic, timestamp) {
      const wrapper = document.createElement('div');
      wrapper.className = `flex items-end gap-2 mb-2 ${isOwn ? 'justify-end' : 'justify-start'} message-enter`;
      setTimeout(() => wrapper.classList.add('message-enter-active'), 10);

      if (!isOwn) {
        const avatar = document.createElement('img');
        avatar.src = profilePic || '/default-avatar.png';
        avatar.className = 'w-8 h-8 rounded-full border-2 border-white shadow-sm flex-shrink-0';
        wrapper.appendChild(avatar);
      }

      const content = document.createElement('div');
      content.className = `flex flex-col ${isOwn ? 'items-end' : 'items-start'} max-w-[85%]`;

      const bubble = document.createElement('div');
      bubble.className = `px-4 py-2 text-sm sm:text-base rounded-2xl shadow-sm ${
        isOwn ? 'bg-primary-500 text-white rounded-br-none' : 'bg-white text-gray-800 border border-gray-200 rounded-bl-none'
      }`;
      bubble.textContent = message;

      const time = document.createElement('div');
      time.className = `text-xs mt-1 px-1 text-gray-500 ${isOwn ? 'text-right' : 'text-left'}`;
      time.textContent = formatTime(timestamp);

      content.appendChild(bubble);
      content.appendChild(time);
      wrapper.appendChild(content);
      messagesDiv.appendChild(wrapper);
    }

    function formatTime(date) {
      return new Date(date).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }

    function scrollToBottom() {
      messagesDiv.scrollTo({ top: messagesDiv.scrollHeight, behavior: 'smooth' });
    }

    // Fix mobile keyboard overlap
    if ('visualViewport' in window) {
      window.visualViewport.addEventListener('resize', scrollToBottom);
    }
  </script>
</body>
</html> 



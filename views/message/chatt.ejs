<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Chat with <%= user.username %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="/socket.io/socket.io.js"></script>
</head>

<body class="bg-gray-100 h-screen flex flex-col">

  <!-- Top Bar -->
  <header class="p-4 border-b bg-white flex items-center justify-between shadow-sm sticky top-0 z-50">
    <div class="flex items-center gap-3">
      <img src="<%= user.profilePic %>" alt="Profile"
        class="w-10 h-10 rounded-full object-cover border border-gray-300 shadow-sm" />
      <div class="flex flex-col">
        <h1 class="text-base font-semibold text-gray-900">@<%= user.username %></h1>
        <% if (user.isOnline == 1) { %>
          <span class="text-xs text-green-500 font-medium">Online</span>
        <% } else { %>
          <span class="text-xs text-gray-400 font-medium">Offline</span>
        <% } %>
      </div>
    </div>
    <a href="/dashboard" class="text-gray-500 hover:text-pink-500 transition">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
        stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M15 19l-7-7 7-7" />
      </svg>
    </a>
  </header>

  <!-- Chat Area -->
  <main id="messages"
    class="flex-1 overflow-y-auto px-3 py-4 space-y-3 sm:px-5 md:px-10 lg:px-32 xl:px-48 bg-gradient-to-b from-gray-50 to-white">
    <!-- Messages dynamically appended -->
  </main>

  <!-- Chat Input -->
  <form id="chatForm"
    class="flex items-center gap-2 p-3 border-t border-gray-200 bg-white sticky bottom-0 sm:px-5 md:px-10 lg:px-32 xl:px-48">
    <input type="text" id="message" placeholder="Type a message..." required
      class="flex-1 px-4 py-2 bg-gray-100 rounded-3xl text-sm sm:text-base shadow-sm focus:outline-none focus:ring-2 focus:ring-pink-400" />
      <button type="submit"
      class="px-4 py-2 mb-5 bg-pink-500 text-white rounded-3xl text-sm sm:text-base hover:bg-pink-600 shadow-md transition">
      Send
    </button>
    
  </form>

  <script>
    const currentUserId = "<%= currentUser._id %>";
    const currentUsername = "<%= currentUser.username %>";
    const targetUserId = "<%= user._id %>";

    const socket = io("/ChatLock", {
      auth: { token: currentUserId }
    });

    const messagesDiv = document.getElementById('messages');

    window.addEventListener("DOMContentLoaded", async () => {
      try {
        const res = await fetch(`/api/v1/user/chat/${currentUserId}/${targetUserId}`);
        const data = await res.json();
        if (data.success) {
          data.messages.forEach(msg => {
            appendMessage(
              msg.sender_id === currentUserId ? currentUsername : "<%= user.username %>",
              msg.message,
              msg.sender_id === currentUserId
            );
          });
        }
      } catch (err) {
        console.error("Failed to load chat history", err);
      }
    });

    document.getElementById('chatForm').addEventListener('submit', async function (e) {
      e.preventDefault();
      const msg = document.getElementById('message').value.trim();
      if (!msg) return;

      const data = {
        from: currentUserId,
        to: targetUserId,
        message: msg,
        fromName: currentUsername
      };

      socket.emit('send_message', data);

      try {
        await fetch('/api/v1/user/save-chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            sender_id: currentUserId,
            receiver_id: targetUserId,
            message: msg
          })
        });
      } catch (error) {
        console.error('Failed to save chat:', error);
      }

      appendMessage(currentUsername, msg, true);
      document.getElementById('message').value = '';
    });

    socket.on('loadNewChat', function (data) {
      if (data.from === targetUserId && data.to === currentUserId) {
        appendMessage(data.fromName, data.message, false);
      }
    });

    function appendMessage(sender, message, isOwn) {
      const msgWrapper = document.createElement('div');
      msgWrapper.className = `flex items-end gap-2 mb-2 ${isOwn ? 'justify-end' : 'justify-start'}`;

      if (!isOwn) {
        const avatar = document.createElement('img');
        avatar.src = message.profilePic || '/default-avatar.png';
        avatar.alt = sender;
        avatar.className = 'w-7 h-7 sm:w-8 sm:h-8 rounded-full border border-gray-300';
        msgWrapper.appendChild(avatar);
      }

      const msgBubble = document.createElement('div');
      msgBubble.className = `max-w-[75%] sm:max-w-xs px-4 py-2 text-sm sm:text-base rounded-2xl ${
        isOwn
          ? 'bg-pink-500 text-white rounded-br-none'
          : 'bg-gray-200 text-gray-800 rounded-bl-none'
      }`;
      msgBubble.textContent = message.text || message;

      msgWrapper.appendChild(msgBubble);
      messagesDiv.appendChild(msgWrapper);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }
  </script>

</body>
</html>

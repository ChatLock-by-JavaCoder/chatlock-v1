<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ChatLock Messenger - Favorites</title>
  <meta name="description" content="Secure messaging platform with real-time chat capabilities">

  <!-- Web App Manifest for PWA -->
  <link rel="manifest" href="/manifest.json">

  <!-- External Resources -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"
    integrity="sha256-oP6HI9z1XaZNBrJURtCoUT5SUnxFr8s3BzRl+cbzUq8=" crossorigin="anonymous"></script>
  <script src="/socket.io/socket.io.js"></script>

  <style type="text/tailwindcss">
    @theme {
      --color-primary: #4361ee;
      --color-primary-light: #ebf2ff;
      --color-secondary: #3a0ca3;
      --color-accent: #06d6a0;
      --color-dark: #1a1b25;
      --color-light: #f8f9fa;
      --color-gray: #6c757d;
      --color-gray-light: #e9ecef;
      --color-success: #06d6a0;
      --color-warning: #ffd166;
      --color-danger: #ef476f;
    }
  </style>

  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #ebf2ff;
      --secondary: #3a0ca3;
      --accent: #06d6a0;
      --dark: #1a1b25;
      --light: #f8f9fa;
      --gray: #6c757d;
      --gray-light: #e9ecef;
      --success: #06d6a0;
      --warning: #ffd166;
      --danger: #ef476f;

      /* Dark mode variables */
      --dark-bg: #121212;
      --dark-surface: #1e1e1e;
      --dark-text: #e0e0e0;
      --dark-border: #333333;
      --dark-card: #252525;
    }

    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--light);
      color: var(--dark);
      min-height: 100vh;
      overflow-x: hidden;
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    /* Dark mode styles */
    body.dark-mode {
      background-color: var(--dark-bg);
      color: var(--dark-text);
    }

    .dark-mode .sidebar {
      background-color: var(--dark-surface);
      border-right-color: var(--dark-border);
    }

    .dark-mode .mobile-header {
      background-color: var(--dark-surface);
      color: var(--dark-text);
    }

    .dark-mode .user-item,
    .dark-mode .dropdown-menu,
    .dark-mode .search-results {
      background-color: var(--dark-card);
      border-color: var(--dark-border);
      color: var(--dark-text);
    }

    .dark-mode .dropdown-item:hover,
    .dark-mode .search-result-item:hover {
      background-color: rgba(67, 97, 238, 0.2);
    }

    .dark-mode .input-field {
      background-color: var(--dark-surface);
      border-color: var(--dark-border);
      color: var(--dark-text);
    }

    .dark-mode .input-field:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.3);
    }

    .dark-mode .empty-state {
      color: var(--gray);
    }

    .dark-mode nav a {
      color: var(--dark-text);
    }

    .dark-mode nav a:hover {
      background-color: rgba(67, 97, 238, 0.2);
    }

    .dark-mode .profile-section {
      border-bottom-color: var(--dark-border);
    }

    /* Smooth transitions */
    * {
      transition: background-color 0.2s ease, color 0.2s ease, opacity 0.2s ease, transform 0.2s ease;
    }

    /* Loading Spinner */
    .spinner {
      border: 3px solid var(--gray-light);
      border-top: 3px solid var(--primary);
      border-radius: 50%;
      width: 24px;
      height: 24px;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    /* Global Loading Overlay */
    .loading-overlay {
      position: fixed;
      inset: 0;
      background: rgba(255, 255, 255, 0.95);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 2000;
      transition: opacity 0.3s ease;
      backdrop-filter: blur(4px);
    }

    .dark-mode .loading-overlay {
      background: rgba(18, 18, 18, 0.95);
    }

    /* Skeleton Loading */
    .skeleton {
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: skeleton-loading 1.5s ease infinite;
      border-radius: 4px;
    }

    .dark-mode .skeleton {
      background: linear-gradient(90deg, #2a2a2a 25%, #333333 50%, #2a2a2a 75%);
    }

    @keyframes skeleton-loading {
      0% {
        background-position: 200% 0;
      }

      100% {
        background-position: -200% 0;
      }
    }

    /* User Item Loading */
    .user-item-loading {
      opacity: 0.7;
      pointer-events: none;
      position: relative;
    }

    .user-item-loading::after {
      content: '';
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      width: 20px;
      height: 20px;
      border: 3px solid var(--gray-light);
      border-top: 3px solid var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    /* Sidebar Styles */
    .sidebar {
      width: 280px;
      transform: translateX(-100%);
      transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: fixed;
      top: 0;
      bottom: 0;
      z-index: 1000;
      background-color: white;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      border-right: 1px solid var(--gray-light);
    }

    .sidebar.open {
      transform: translateX(0);
    }

    .sidebar-overlay {
      position: fixed;
      inset: 0;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 999;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      backdrop-filter: blur(2px);
    }

    .sidebar-overlay.open {
      opacity: 1;
      visibility: visible;
    }

    /* Profile Section */
    .profile-section {
      border-bottom: 1px solid var(--gray-light);
      padding-bottom: 1.5rem;
      margin-bottom: 1.5rem;
    }

    /* Notification Badge */
    .notification-badge {
      position: absolute;
      top: -4px;
      right: -4px;
      width: 20px;
      height: 20px;
      background-color: var(--danger);
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      font-weight: 600;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    /* Status Indicators */
    .online-status::before {
      content: '';
      display: inline-block;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background-color: var(--success);
      margin-right: 6px;
      box-shadow: 0 0 0 2px rgba(6, 214, 160, 0.2);
    }

    .offline-status::before {
      content: '';
      display: inline-block;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background-color: var(--gray);
      margin-right: 6px;
    }

    /* Dropdown Menu */
    .dropdown-menu {
      display: none;
      position: absolute;
      top: calc(100% + 8px);
      right: 0;
      width: 320px;
      max-height: 400px;
      overflow-y: auto;
      background: white;
      border: 1px solid var(--gray-light);
      border-radius: 12px;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      z-index: 50;
      transform-origin: top right;
      transform: scale(0.95);
      opacity: 0;
      transition: transform 0.2s ease, opacity 0.2s ease;
    }

    .dropdown-menu.show {
      transform: scale(1);
      opacity: 1;
    }

    .dropdown-item {
      padding: 1rem;
      border-bottom: 1px solid var(--gray-light);
      transition: background-color 0.2s;
    }

    .dropdown-item:hover {
      background-color: var(--primary-light);
    }

    .dropdown-item:last-child {
      border-bottom: none;
    }

    /* Search Results */
    .search-results {
      position: absolute;
      top: calc(100% + 8px);
      left: 0;
      right: 0;
      max-height: 300px;
      overflow-y: auto;
      background: white;
      border: 1px solid var(--gray-light);
      border-radius: 12px;
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      z-index: 40;
      display: none;
      transform-origin: top center;
      transform: scale(0.95);
      opacity: 0;
      transition: transform 0.2s ease, opacity 0.2s ease;
    }

    .search-results.show {
      transform: scale(1);
      opacity: 1;
    }

    .search-result-item {
      padding: 1rem;
      transition: background-color 0.2s;
    }

    .search-result-item:hover {
      background-color: var(--primary-light);
    }

    /* Main Content */
    .main-content {
      transition: margin-left 0.3s ease;
    }

    /* Chat Items */
    .user-item {
      transition: all 0.2s ease;
      cursor: pointer;
    }

    .user-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    /* Buttons */
    .btn {
      padding: 0.5rem 1rem;
      border-radius: 8px;
      font-weight: 500;
      transition: all 0.2s ease;
    }

    .btn-primary {
      background-color: var(--primary);
      color: white;
    }

    .btn-primary:hover {
      background-color: var(--secondary);
      transform: translateY(-1px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    /* Input Fields */
    .input-field {
      padding: 0.75rem 1rem;
      border: 1px solid var(--gray-light);
      border-radius: 8px;
      transition: all 0.2s ease;
    }

    .input-field:focus {
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
      outline: none;
    }

    /* Responsive Design */
    @media (min-width: 768px) {
      .sidebar {
        transform: translateX(0);
        position: static;
        height: 100vh;
      }

      .sidebar-overlay {
        display: none;
      }

      .main-content {
        margin-left: 280px;
      }

      .mobile-header {
        display: none !important;
      }
    }

    /* Animations */
    .fade-in {
      animation: fadeIn 0.2s ease-in;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }

      to {
        opacity: 1;
      }
    }

    /* Pulse Animation */
    @keyframes pulse {

      0%,
      100% {
        opacity: 1;
      }

      50% {
        opacity: 0.5;
      }
    }

    .pulse {
      animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }

    /* Custom Scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }

    ::-webkit-scrollbar-track {
      background: var(--gray-light);
      border-radius: 10px;
    }

    .dark-mode ::-webkit-scrollbar-track {
      background: var(--dark-border);
    }

    ::-webkit-scrollbar-thumb {
      background: var(--primary);
      border-radius: 10px;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: var(--secondary);
    }

    /* Verified Badge */
    .verified-badge {
      color: var(--primary);
      font-size: 0.75rem;
      margin-left: 0.25rem;
    }

    /* Avatar Styles */
    .avatar {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid white;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    /* Empty State */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      padding: 2rem;
      color: var(--gray);
    }

    .empty-state-icon {
      font-size: 3rem;
      color: var(--gray-light);
      margin-bottom: 1rem;
    }

    /* Theme Toggle Button */
    .theme-toggle {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: var(--primary-light);
      color: var(--primary);
      cursor: pointer;
      transition: all 0.3s ease;
      border: none;
      outline: none;
    }

    .theme-toggle:hover {
      background-color: var(--primary);
      color: white;
    }

    .dark-mode .theme-toggle {
      background-color: rgba(67, 97, 238, 0.2);
      color: var(--primary);
    }

    .dark-mode .theme-toggle:hover {
      background-color: var(--primary);
      color: white;
    }

    /* Mobile notification prompt */
    .notification-prompt {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background-color: var(--primary);
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      display: flex;
      align-items: center;
      gap: 12px;
      z-index: 1000;
      max-width: 90%;
      animation: slideUp 0.3s ease-out;
    }

    .notification-prompt button {
      background-color: white;
      color: var(--primary);
      border: none;
      padding: 6px 12px;
      border-radius: 4px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .notification-prompt button:hover {
      background-color: var(--primary-light);
    }

    .dark-mode .notification-prompt {
      background-color: var(--dark-card);
      border: 1px solid var(--dark-border);
    }

    .dark-mode .notification-prompt button {
      background-color: var(--primary);
      color: white;
    }

    @keyframes slideUp {
      from {
        transform: translateX(-50%) translateY(100%);
        opacity: 0;
      }

      to {
        transform: translateX(-50%) translateY(0);
        opacity: 1;
      }
    }

    /* New styles for favorites page */
    .favorite-icon {
      color: var(--warning);
      transition: all 0.2s ease;
    }

    .favorite-icon:hover {
      transform: scale(1.1);
    }

    .favorite-icon.active {
      color: var(--warning);
    }

    .favorite-icon.inactive {
      color: var(--gray-light);
    }

    .user-item-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 100%;
    }

    .user-actions {
      display: flex;
      gap: 12px;
    }

    .action-btn {
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1rem;
      color: var(--gray);
      transition: all 0.2s ease;
    }

    .action-btn:hover {
      color: var(--primary);
    }

    .last-message-time {
      font-size: 0.75rem;
      color: var(--gray);
      margin-top: 4px;
    }

    .dark-mode .last-message-time {
      color: var(--gray-light);
    }

    .favorites-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .refresh-btn {
      background-color: var(--primary-light);
      color: var(--primary);
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 8px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: all 0.2s ease;
    }

    .refresh-btn:hover {
      background-color: var(--primary);
      color: white;
    }

    .dark-mode .refresh-btn {
      background-color: rgba(67, 97, 238, 0.2);
    }

    .dark-mode .refresh-btn:hover {
      background-color: var(--primary);
    }

    .empty-favorites {
      text-align: center;
      padding: 3rem 0;
    }

    .empty-favorites-icon {
      font-size: 4rem;
      color: var(--gray-light);
      margin-bottom: 1.5rem;
    }

    .empty-favorites-text {
      font-size: 1.25rem;
      color: var(--gray);
      margin-bottom: 1.5rem;
    }

    .empty-favorites-btn {
      background-color: var(--primary);
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .empty-favorites-btn:hover {
      background-color: var(--secondary);
      transform: translateY(-2px);
    }

    .user-item-content {
      display: flex;
      align-items: center;
      width: 100%;
      gap: 12px;
    }

    .user-info {
      flex: 1;
      min-width: 0;
    }

    .user-name {
      display: flex;
      align-items: center;
      gap: 4px;
    }

    .typing-indicator {
      font-size: 0.75rem;
      color: var(--primary);
      font-style: italic;
    }

    .dark-mode .typing-indicator {
      color: var(--accent);
    }
  </style>
</head>

<body class="bg-gray-50">
  <!-- Global Loading Overlay -->
  <div id="loadingOverlay" class="loading-overlay">
    <div class="flex flex-col items-center">
      <div class="spinner mb-4"></div>
      <p class="text-gray-600">Loading ChatLock...</p>
    </div>
  </div>

  <!-- Mobile Header -->
  <header
    class="mobile-header fixed top-0 left-0 right-0 bg-white shadow-sm z-50 p-4 flex justify-between items-center md:hidden">
    <button id="menuToggle" class="text-gray-600 hover:text-gray-800 focus:outline-none transition-colors">
      <i class="fas fa-bars text-xl"></i>
    </button>
    <h1 class="text-xl font-bold  flex items-center">
      <i class="fas fa-comment-dots  mr-2"></i> ChatLock
    </h1>
    <div class="flex items-center gap-4">
      <button id="themeToggleMobile" class="theme-toggle">
        <i class="fas fa-moon"></i>
      </button>
      <div class="relative">
        <button id="notificationBtn"
          class="text-gray-600 hover:text-gray-800 focus:outline-none relative transition-colors">
          <i class="fas fa-bell text-xl"></i>
          <span id="unreadCount" class="notification-badge" style="display: none;">0</span>
        </button>
        <div id="notificationList" class="dropdown-menu">
          <div class="p-3 border-b border-gray-200 flex justify-between items-center bg-gray-50 rounded-t-lg">
            <h3 class="font-semibold text-gray-800">Notifications</h3>
            <button id="markDropdownRead"
              class="text-sm text-primary hover:text-secondary flex items-center gap-2 transition-colors">
              <span>Mark all as read</span>
              <span id="markReadSpinner" class="spinner hidden" style="width: 16px; height: 16px;"></span>
            </button>
          </div>
          <div id="notificationItems" class="divide-y "></div>
        </div>
      </div>
    </div>
  </header>


  <div class="flex min-h-screen">
    <!-- Sidebar Navigation -->
    <aside class="sidebar" id="sidebar">
      <div class="p-6 h-full flex flex-col">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold  flex items-center">
            <i class="fas fa-comment-dots text-primary mr-2"></i> ChatLock
          </h2>
          <div class="flex items-center gap-2">
            <button id="themeToggle" class="theme-toggle">
              <i class="fas fa-moon"></i>
            </button>
            <button id="closeSidebar"
              class="md:hidden text-gray-600 hover:text-gray-800 focus:outline-none transition-colors">
              <i class="fas fa-times text-lg"></i>
            </button>
          </div>
        </div>

                <div class="profile-section">
          <div class="flex items-center space-x-3">
            <img
              src="<%= currentUser.profilePic || 'https://res.cloudinary.com/dzdnwsojc/image/upload/v1746804708/rkwqxwswd9plkd7wpoy7.jpg' %>"
              alt="Profile" class="avatar">
            <div>
              <p class="font-semibold ">@<%= currentUser.username %>
              </p>
              <% if (currentUser.username==='code_with_irfan' ) { %>
                <span title="Verified" class="verified-badge"><i class="fas fa-check-circle"></i></span>
                <% } %>

                  <p class="text-sm text-success online-status" <%=currentUser.isOnline===1 ? 'online-status'
                    : 'offline-status' %> truncate">
                    <%= currentUser.isOnline==="true" ? 'Online' : 'Offline' %>
                  </p>
            </div>
          </div>
        </div>


      


        <div class="relative mb-6">
          <div class="relative">
            <input type="text" id="userSearch" placeholder="Search users..."
              class="input-field w-full pl-10 pr-4 py-2 bg-gray-50 text-sm">
            <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
          </div>
          <div id="searchResults" class="search-results">
            <div id="searchLoading" class="p-4 hidden">
              <div class="flex justify-center">
                <div class="spinner"></div>
              </div>
            </div>
          </div>
        </div>

             <a href="/api/v1/user/users"
            class="flex items-center px-4 py-2 rounded-lg bg-primary-light text-primary font-medium hover:bg-primary hover:text-white transition-colors">
            <i class="fas fa-inbox mr-3"></i> Home
            <span id="sidebarUnreadCount" class="ml-auto bg-primary text-white text-xs px-2 py-1 rounded-full"
              style="display: none;">0</span>
          </a>

      


           <a href="/api/v1/user/setting"
            class="flex items-center px-4 py-2 rounded-lg text-gray-600 hover:bg-gray-100 hover:text-gray-800 transition-colors">
            <i class="fas fa-cog mr-3"></i> Settings
          </a>
      
      </div>
    </aside>

    <!-- Main Content Area -->
    <main class="main-content flex-1 p-6">
      <div class="max-w-3xl mx-auto">
        <div class="favorites-header">
          <h2 class="text-2xl font-semibold text-gray-800">Favorite Conversations</h2>
          <button id="refreshFavorites" class="refresh-btn">
            <i class="fas fa-sync-alt"></i>
            <span>Refresh</span>
          </button>
        </div>

        <!-- Search Info (Mobile) -->
        <div class="md:hidden mb-4 bg-primary-light p-3 rounded-lg">
          <p class="text-sm text-primary">
            <i class="fas fa-info-circle mr-2"></i> Use the search in the sidebar to find users
          </p>
        </div>

        <div id="userListContainer" class="space-y-3">
          <!-- Skeleton Loading for User List -->
          <div id="userListSkeleton" class="space-y-3 hidden">
            <% for(let i=0; i < 3; i++) { %>
              <div class="bg-white p-4 rounded-lg shadow-sm">
                <div class="flex items-center space-x-4">
                  <div class="w-12 h-12 rounded-full skeleton"></div>
                  <div class="flex-1 space-y-2">
                    <div class="h-4 w-1/3 skeleton"></div>
                    <div class="h-3 w-1/4 skeleton"></div>
                  </div>
                </div>
              </div>
              <% } %>
          </div>

          <!-- Empty State -->
          <div id="emptyFavoritesState" class="empty-favorites <%= favourites.length > 0 ? 'hidden' : '' %>">
            <div class="empty-favorites-icon">
              <i class="fas fa-star"></i>
            </div>
            <h3 class="empty-favorites-text">No favorite conversations yet</h3>
            <p class="text-gray-500 mb-6">Your favorite contacts will appear here for quick access</p>
            <button id="findFriendsBtn" class="empty-favorites-btn">
              <i class="fas fa-search mr-2"></i> Find Friends
            </button>
          </div>

          <!-- Actual User List -->
          <div id="userListContent" class="space-y-3">
            <% favourites.forEach(user=> { %>
              <div class="user-item bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-all dark:bg-dark-card"
                data-user-id="<%= user._id %>">
                <div class="user-item-content">
                  <div class="relative">
                    <img src="<%= user.profilePic %>" alt="<%= user.username %>" class="avatar">
                    <% if (user.unreadCount> 0) { %>
                      <span class="notification-badge">
                        <%= user.unreadCount %>
                      </span>
                      <% } %>
                  </div>
                  <div class="user-info">
                    <div class="user-item-header">
                      <div class="user-name">
                        <span class="font-semibold truncate">@<%= user.username %></span>
                        <% if (user.username==='code_with_irfan' ) { %>
                          <span title="Verified" class="verified-badge"><i class="fas fa-check-circle"></i></span>
                          <% } %>
                      </div>
                      <div class="user-actions">
                        <button class="action-btn favorite-toggle" data-user-id="<%= user._id %>" title="Remove from favorites">
                          <i class="fas fa-star favorite-icon active"></i>
                        </button>
                      </div>
                    </div>
                    <p class="text-sm <%= user.isOnline === 1 ? 'online-status' : 'offline-status' %> truncate">
                      <%= user.isOnline==='true' ? 'Online' : 'Offline' %>
                    </p>
                    <% if (user.lastMessage) { %>
                      <p class="text-sm text-gray-500 truncate dark:text-gray-400">
                        <%= user.lastMessage.content %>
                      </p>
                      <p class="last-message-time">
                        <%= new Date(user.lastMessage.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                      </p>
                      <% } %>
                  </div>
                </div>
              </div>
              <% }) %>
          </div>
        </div>
      </div>
    </main>
  </div>

  <!-- Sidebar Overlay (Mobile) -->
  <div class="sidebar-overlay" id="sidebarOverlay"></div>

  <!-- Notification Prompt (Mobile) -->
  <div id="notificationPrompt" class="notification-prompt hidden">
    <i class="fas fa-bell"></i>
    <span>Enable notifications for new messages</span>
    <div class="flex gap-2">
      <button id="enableNotifications" class="text-xs">Allow</button>
      <button id="dismissPrompt" class="text-xs">Dismiss</button>
    </div>
  </div>

  <script>
    // Current user context
    const currentUserId = "<%= currentUser._id %>";
    const socket = io("/ChatLock", {
      auth: { token: currentUserId },
      transports: ['websocket']
    });

    // State management
    const userUnreadCounts = {};
    let currentChatUserId = null;
    let isUserInChat = false;
    let notifications = [];
    let allUsers = JSON.parse('<%- JSON.stringify(favourites) %>');
    let isSearching = false;
    let darkMode = localStorage.getItem('darkMode') === 'true';

    // DOM Elements
    const notificationList = document.getElementById('notificationList');
    const searchResults = document.getElementById('searchResults');
    const themeToggle = document.getElementById('themeToggle');
    const themeToggleMobile = document.getElementById('themeToggleMobile');
    const notificationPrompt = document.getElementById('notificationPrompt');
    const enableNotificationsBtn = document.getElementById('enableNotifications');
    const dismissPromptBtn = document.getElementById('dismissPrompt');
    const refreshFavoritesBtn = document.getElementById('refreshFavorites');
    const findFriendsBtn = document.getElementById('findFriendsBtn');
    const emptyFavoritesState = document.getElementById('emptyFavoritesState');

    // Initialize dark mode
    function initDarkMode() {
      if (darkMode) {
        document.body.classList.add('dark-mode');
        themeToggle.innerHTML = '<i class="fas fa-sun"></i>';
        themeToggleMobile.innerHTML = '<i class="fas fa-sun"></i>';
      } else {
        document.body.classList.remove('dark-mode');
        themeToggle.innerHTML = '<i class="fas fa-moon"></i>';
        themeToggleMobile.innerHTML = '<i class="fas fa-moon"></i>';
      }
    }

    // Toggle dark mode
    function toggleDarkMode() {
      darkMode = !darkMode;
      localStorage.setItem('darkMode', darkMode);
      initDarkMode();
    }

    // Check notification permission and show prompt if needed
    function checkNotificationPermission() {
      if ('Notification' in window && Notification.permission === 'default') {
        // Only show prompt on mobile devices
        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
          setTimeout(() => {
            notificationPrompt.classList.remove('hidden');
          }, 5000);
        }
      }
    }

    // Fetch initial unread counts from server
    async function fetchInitialUnreadCounts() {
      try {
        const response = await fetch('/api/v1/user/unread-count', {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });
        const data = await response.json();
        if (data.success) {
          Object.assign(userUnreadCounts, data.unreadCounts);
          updateGlobalUnreadCount();
          Object.entries(userUnreadCounts).forEach(([userId, count]) => {
            updateUserBadge(userId, count);
          });
        }
      } catch (err) {
        console.error('Error fetching unread counts:', err);
      }
    }

    // Initialize notification badges
    function initializeBadges() {
      allUsers.forEach(user => {
        if (user.unreadCount > 0) {
          userUnreadCounts[user._id] = user.unreadCount;
        }
      });
      updateGlobalUnreadCount();
    }

    function checkActiveChat() {
      const chatMatch = window.location.pathname.match(/\/chat\/([^\/]+)/);
      currentChatUserId = chatMatch ? chatMatch[1] : null;
      isUserInChat = currentChatUserId && currentChatUserId !== currentUserId;
    }

    function updateUserStatus(userId, isOnline) {
      const userElement = document.querySelector(`.user-item[data-user-id="${userId}"]`);
      if (!userElement) return;

      const statusElement = userElement.querySelector('p.text-sm');
      if (statusElement) {
        statusElement.innerHTML = isOnline ? '<span class="online-status">Online</span>' : '<span class="offline-status">Offline</span>';
      }
    }

    function updateUserBadge(userId, count) {
      const userElement = document.querySelector(`.user-item[data-user-id="${userId}"]`);
      if (!userElement) return;

      const avatarContainer = userElement.querySelector('.relative');
      if (!avatarContainer) return;

      let badge = avatarContainer.querySelector('.notification-badge');

      if (count > 0) {
        if (!badge) {
          badge = document.createElement('span');
          badge.className = 'notification-badge';
          avatarContainer.appendChild(badge);
        }
        badge.textContent = count;
      } else if (badge) {
        badge.remove();
      }
    }

    function showDesktopNotification(data) {
      if (!("Notification" in window)) return;

      if (Notification.permission === "granted") {
        new Notification(`${data.senderName} sent a message`, {
          body: data.preview,
          icon: data.senderAvatar,
          vibrate: [200, 100, 200],
        });
      } else if (Notification.permission !== "denied") {
        Notification.requestPermission().then(permission => {
          if (permission === "granted") {
            new Notification(`${data.senderName} sent a message`, {
              body: data.preview,
              icon: data.senderAvatar,
              vibrate: [200, 100, 200],
            });
          }
        });
      }
    }

    function updateGlobalUnreadCount() {
      const globalBadge = document.getElementById('unreadCount');
      const sidebarBadge = document.getElementById('sidebarUnreadCount');

      if (globalBadge || sidebarBadge) {
        const total = Object.values(userUnreadCounts).reduce((a, b) => a + b, 0);

        if (globalBadge) {
          globalBadge.textContent = total > 99 ? '99+' : total;
          globalBadge.style.display = total > 0 ? 'flex' : 'none';
        }

        if (sidebarBadge) {
          sidebarBadge.textContent = total > 99 ? '99+' : total;
          sidebarBadge.style.display = total > 0 ? 'flex' : 'none';
        }
      }
    }

    async function renderNotifications() {
      const container = document.getElementById('notificationItems');
      container.innerHTML = '<div class="p-4 flex justify-center"><div class="spinner"></div></div>';

      try {
        const res = await fetch('/api/v1/user/notifications-all', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        const data = await res.json();

        if (data.success) {
          const notifications = data.notifications;
          container.innerHTML = '';

          if (notifications.length === 0) {
            container.innerHTML = '<div class="p-4 text-center text-gray-500">No notifications yet</div>';
            return;
          }

          notifications.forEach(notification => {
            const item = document.createElement('div');
            item.className = `dropdown-item cursor-pointer ${notification.isRead ? '' : 'bg-primary-light'}`;
            item.dataset.id = notification._id;

            const isRead = notification.isRead || false;
            const readIcon = isRead ? '<i class="fas fa-check-circle text-success ml-2" title="Read"></i>' : '';

            item.innerHTML = `
              <div class="flex items-start gap-3">
                <div class="h-10 w-10 rounded-full bg-gray-200 overflow-hidden flex-shrink-0">
                  ${notification.senderDetails?.profilePic
                ? `<img src="${notification.senderDetails.profilePic}" alt="${notification.senderDetails.username}" class="h-full w-full object-cover">`
                : `<i class="fas fa-user text-gray-500 flex items-center justify-center h-full w-full"></i>`}
                </div>
                <div class="flex-1 min-w-0">
                  <div class="flex items-center">
                    <p class="text-sm font-medium text-gray-900 truncate">${notification.senderDetails?.username || 'System'}</p>
                    ${readIcon}
                  </div>
                  <p class="text-sm text-gray-600 truncate">${notification.message}</p>
                  <p class="text-xs text-gray-400 mt-1">${formatTime(notification.createdAt)}</p>
                </div>
              </div>
            `;

            // Mark notification as read when clicked
            item.addEventListener('click', async () => {
              if (!isRead) {
                try {
                  await fetch(`/api/v1/user/notifications/${notification._id}/mark-viewed`, {
                    method: 'POST',
                    headers: {
                      'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                  });
                  notification.isRead = true;
                  item.classList.remove('bg-primary-light');
                  renderNotifications(); // Re-render to show read icon
                } catch (err) {
                  console.error('Failed to mark individual notification as viewed:', err);
                }
              }
              // Navigate to chat
              if (notification.senderDetails?._id) {
                window.location.href = `/api/v1/user/chat/${notification.senderDetails._id}`;
              }
            });

            container.appendChild(item);
          });

          // Mark all notifications as viewed when the dropdown is opened
          await fetch('/api/v1/user/notifications/mark-viewed', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            }
          });

          // Reset unread badge counts
          Object.keys(userUnreadCounts).forEach(id => {
            userUnreadCounts[id] = 0;
            updateUserBadge(id, 0);
          });
          updateGlobalUnreadCount();
        }
      } catch (err) {
        console.error('Error loading notifications:', err);
        container.innerHTML = '<div class="p-4 text-center text-gray-500">Error loading notifications</div>';
      }
    }

    function formatTime(timestamp) {
      const now = new Date();
      const date = new Date(timestamp);
      const diffInSeconds = Math.floor((now - date) / 1000);

      if (diffInSeconds < 60) return 'Just now';
      if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
      if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
      return `${Math.floor(diffInSeconds / 86400)}d ago`;
    }

    async function searchUsers(query) {
      const resultsContainer = document.getElementById('searchResults');
      const searchLoading = document.getElementById('searchLoading');

      if (query.trim() === '') {
        resultsContainer.classList.remove('show');
        searchLoading.classList.add('hidden');
        isSearching = false;
        return;
      }

      if (!isSearching) {
        isSearching = true;
        searchLoading.classList.remove('hidden');
        resultsContainer.style.display = 'block';
        resultsContainer.innerHTML = '';
        resultsContainer.classList.add('show');
      }

      // Debounce search to avoid too many requests
      await new Promise(resolve => setTimeout(resolve, 500));

      const filteredUsers = allUsers.filter(user =>
        user.username.toLowerCase().includes(query.toLowerCase())
      );

      searchLoading.classList.add('hidden');
      resultsContainer.innerHTML = '';

      if (filteredUsers.length === 0) {
        resultsContainer.innerHTML = '<div class="p-4 text-gray-500 text-center">No users found</div>';
        resultsContainer.classList.add('show');
        isSearching = false;
        return;
      }

      filteredUsers.forEach(user => {
        const item = document.createElement('div');
        item.className = 'search-result-item';
        item.innerHTML = `
          <div class="flex items-center">
            <img src="${user.profilePic}" alt="${user.username}" class="w-10 h-10 rounded-full mr-3 object-cover">
            <div class="min-w-0">
              <div class="font-medium text-gray-800 truncate">@${user.username}</div>
              <div class="text-sm ${user.isOnline === 1 ? 'online-status' : 'offline-status'} truncate">
                ${user.isOnline === 'true' ? 'Online' : 'Offline'}
              </div>
            </div>
          </div>
        `;
        item.addEventListener('click', () => {
          window.location.href = `/api/v1/user/chat/${user._id}`;
        });
        resultsContainer.appendChild(item);
      });

      resultsContainer.classList.add('show');
      isSearching = false;
    }

    // Toggle user favorite status
    async function toggleFavorite(userId) {
      const userElement = document.querySelector(`.user-item[data-user-id="${userId}"]`);
      if (!userElement) return;

      const favoriteBtn = userElement.querySelector('.favorite-toggle i');
      const isFavorite = favoriteBtn.classList.contains('active');

      try {
        const response = await fetch(`/api/v1/user/favorites/${userId}`, {
          method: isFavorite ? 'DELETE' : 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (response.ok) {
          if (isFavorite) {
            favoriteBtn.classList.remove('active');
            favoriteBtn.classList.add('inactive');
            favoriteBtn.title = 'Add to favorites';
            userElement.remove();
            
            // Show empty state if no favorites left
            const favoritesCount = document.querySelectorAll('.user-item').length;
            if (favoritesCount === 0) {
              emptyFavoritesState.classList.remove('hidden');
            }
          } else {
            favoriteBtn.classList.add('active');
            favoriteBtn.classList.remove('inactive');
            favoriteBtn.title = 'Remove from favorites';
          }
          
          showToast(isFavorite ? 'Removed from favorites' : 'Added to favorites', 'success');
        } else {
          throw new Error('Failed to update favorite status');
        }
      } catch (err) {
        console.error('Error toggling favorite:', err);
        showToast('Failed to update favorite status', 'error');
      }
    }

    // Refresh favorites list
    async function refreshFavorites() {
      const userListContent = document.getElementById('userListContent');
      const userListSkeleton = document.getElementById('userListSkeleton');
      
      userListContent.classList.add('hidden');
      userListSkeleton.classList.remove('hidden');
      
      try {
        const response = await fetch('/api/v1/user/favorites', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });
        
        const data = await response.json();
        
        if (data.success) {
          allUsers = data.favorites;
          
          if (allUsers.length === 0) {
            emptyFavoritesState.classList.remove('hidden');
            userListContent.innerHTML = '';
          } else {
            emptyFavoritesState.classList.add('hidden');
            // Re-render the favorites list
            userListContent.innerHTML = allUsers.map(user => `
              <div class="user-item bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-all dark:bg-dark-card"
                data-user-id="${user._id}">
                <div class="user-item-content">
                  <div class="relative">
                    <img src="${user.profilePic}" alt="${user.username}" class="avatar">
                    ${user.unreadCount > 0 ? 
                      `<span class="notification-badge">${user.unreadCount}</span>` : ''}
                  </div>
                  <div class="user-info">
                    <div class="user-item-header">
                      <div class="user-name">
                        <span class="font-semibold truncate">@${user.username}</span>
                        ${user.username === 'code_with_irfan' ? 
                          `<span title="Verified" class="verified-badge"><i class="fas fa-check-circle"></i></span>` : ''}
                      </div>
                      <div class="user-actions">
                        <button class="action-btn favorite-toggle" data-user-id="${user._id}" title="Remove from favorites">
                          <i class="fas fa-star favorite-icon active"></i>
                        </button>
                      </div>
                    </div>
                    <p class="text-sm ${user.isOnline === 1 ? 'online-status' : 'offline-status'} truncate">
                      ${user.isOnline === 'true' ? 'Online' : 'Offline'}
                    </p>
                    ${user.lastMessage ? `
                      <p class="text-sm text-gray-500 truncate dark:text-gray-400">
                        ${user.lastMessage.content}
                      </p>
                      <p class="last-message-time">
                        ${new Date(user.lastMessage.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                      </p>
                    ` : ''}
                  </div>
                </div>
              </div>
            `).join('');
          }
        } else {
          throw new Error('Failed to fetch favorites');
        }
      } catch (err) {
        console.error('Error refreshing favorites:', err);
        showToast('Failed to refresh favorites', 'error');
      } finally {
        userListSkeleton.classList.add('hidden');
        userListContent.classList.remove('hidden');
      }
    }

    // Socket.IO Event Listeners
    socket.on("user_online", (userId) => updateUserStatus(userId, true));
    socket.on("user_offline", (userId) => updateUserStatus(userId, false));

    socket.on('new_message_notification', (data) => {
      checkActiveChat();

      if (!userUnreadCounts[data.senderId]) {
        userUnreadCounts[data.senderId] = 0;
      }

      const recipientStatus = document.getElementById(`${data.senderId}-status`)?.textContent;
      const isRecipientOnline = recipientStatus === 'Online';

      if (!isRecipientOnline || !isUserInChat) {
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

        if (isMobile && 'serviceWorker' in navigator) {
          try {
            const registration = navigator.serviceWorker.ready;
            registration.then(reg => {
              reg.showNotification(`New message from ${data.senderName}`, {
                body: data.preview,
                icon: data.senderAvatar || '/default-avatar.png',
                data: { url: `/api/v1/user/chat/${data.senderId}` },
                vibrate: [200, 100, 200]
              });
            });
          } catch (err) {
            console.error('Mobile notification failed:', err);
            handleInAppNotification(data);
          }
        } else {
          handleInAppNotification(data);
          if (!document.hasFocus()) showDesktopNotification(data);
        }

        updateUnreadCount();

        if (!isUserInChat || data.senderId !== currentChatUserId) {
          userUnreadCounts[data.senderId]++;
          updateUserBadge(data.senderId, userUnreadCounts[data.senderId]);
          updateGlobalUnreadCount();

          notifications.unshift({
            senderDetails: {
              username: data.senderName,
              profilePic: data.senderAvatar
            },
            message: data.preview,
            createdAt: new Date().toISOString(),
            isRead: false
          });

          if (notificationList.classList.contains('show')) {
            renderNotifications();
          }

          if (!document.hasFocus()) {
            showDesktopNotification(data);
          }
        }
      }
    });

    async function updateUnreadCount() {
      try {
        const res = await fetch('/api/notifications/unread-count');
        const { count } = await res.json();
        unreadNotifications = count;
        updateNotificationBadge();
      } catch (err) {
        console.error('Failed to get unread count:', err);
      }
    }

    // DOM Event Listeners
    document.getElementById('markAllReadButton')?.addEventListener('click', async () => {
      try {
        const response = await fetch('/api/v1/user/notifications/mark-all-read', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (response.ok) {
          Object.keys(userUnreadCounts).forEach(id => {
            userUnreadCounts[id] = 0;
            updateUserBadge(id, 0);
          });

          updateGlobalUnreadCount();
          showToast("All notifications marked as read!", "success");
        } else {
          showToast("Failed to mark notifications as read.", "error");
        }
      } catch (err) {
        console.error("Error marking notifications as read:", err);
        showToast("An error occurred while marking notifications as read.", "error");
      }
    });

    document.getElementById('markDropdownRead')?.addEventListener('click', async (e) => {
      e.stopPropagation();
      const markReadSpinner = document.getElementById('markReadSpinner');
      markReadSpinner.classList.remove('hidden');

      try {
        const response = await fetch('/api/v1/user/notifications/mark-all-read', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (response.ok) {
          Object.keys(userUnreadCounts).forEach(id => {
            userUnreadCounts[id] = 0;
            updateUserBadge(id, 0);
          });

          updateGlobalUnreadCount();
          await renderNotifications();
          showToast("All notifications marked as read!", "success");
        }
      } catch (err) {
        console.error("Error marking notifications as read:", err);
        showToast("Failed to mark notifications as read.", "error");
      } finally {
        markReadSpinner.classList.add('hidden');
      }
    });

    document.getElementById('notificationBtn')?.addEventListener('click', async (e) => {
      e.stopPropagation();

      if (notificationList.classList.contains('show')) {
        notificationList.classList.remove('show');
        setTimeout(() => {
          notificationList.style.display = 'none';
        }, 200);
        return;
      }

      notificationList.style.display = 'block';
      setTimeout(() => {
        notificationList.classList.add('show');
      }, 10);

      await renderNotifications();
    });

    document.getElementById('userSearch')?.addEventListener('input', (e) => {
      searchUsers(e.target.value);
    });

    document.addEventListener('click', (e) => {
      if (!e.target.closest('#notificationBtn') && !e.target.closest('#notificationList')) {
        notificationList.classList.remove('show');
        setTimeout(() => {
          notificationList.style.display = 'none';
        }, 200);
      }

      if (!e.target.closest('#userSearch') && !e.target.closest('#searchResults')) {
        searchResults.classList.remove('show');
        setTimeout(() => {
          searchResults.style.display = 'none';
        }, 200);
      }
    });

    // Favorite toggle event listeners
    document.addEventListener('click', (e) => {
      if (e.target.closest('.favorite-toggle')) {
        e.preventDefault();
        e.stopPropagation();
        const userId = e.target.closest('.favorite-toggle').dataset.userId;
        toggleFavorite(userId);
      }
    });

    // Refresh favorites button
    refreshFavoritesBtn?.addEventListener('click', refreshFavorites);

    // Find friends button
    findFriendsBtn?.addEventListener('click', () => {
      document.getElementById('userSearch').focus();
    });

    // Add loading state for user clicks
    document.querySelectorAll('.user-item').forEach(item => {
      item.addEventListener('click', async (e) => {
        // Only navigate if not clicking on a button inside the user item
        if (!e.target.closest('.action-btn')) {
          const userId = item.dataset.userId;
          item.classList.add('user-item-loading');
          
          try {
            await new Promise(resolve => setTimeout(resolve, 500));
            window.location.href = `/api/v1/user/chat/${userId}`;
          } catch (err) {
            console.error('Error navigating to chat:', err);
            item.classList.remove('user-item-loading');
          }
        }
      });
    });

    // Toast notification function
    function showToast(message, type = 'info') {
      const toast = document.createElement('div');
      toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded-lg shadow-lg text-white ${type === 'success' ? 'bg-success' :
        type === 'error' ? 'bg-danger' :
          type === 'warning' ? 'bg-warning' : 'bg-primary'
        }`;
      toast.textContent = message;
      document.body.appendChild(toast);

      setTimeout(() => {
        toast.classList.add('opacity-0', 'transition-opacity');
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }

    // Initialize with loading states
    async function initializeApp() {
      const loadingOverlay = document.getElementById('loadingOverlay');
      const userListSkeleton = document.getElementById('userListSkeleton');
      const userListContent = document.getElementById('userListContent');

      // Initialize dark mode
      initDarkMode();

      // Check notification permissions
      checkNotificationPermission();

      userListSkeleton.classList.remove('hidden');
      userListContent.classList.add('hidden');

      // Fetch initial unread counts
      await fetchInitialUnreadCounts();

      setTimeout(() => {
        userListSkeleton.classList.add('hidden');
        userListContent.classList.remove('hidden');

        loadingOverlay.style.opacity = '0';
        setTimeout(() => {
          loadingOverlay.style.display = 'none';
        }, 300);

        initializeBadges();
        checkActiveChat();
      }, 1000);
    }

    // Window event listeners
    window.addEventListener('load', initializeApp);
    window.addEventListener('focus', () => {
      if (currentChatUserId) {
        userUnreadCounts[currentChatUserId] = 0;
        updateUserBadge(currentChatUserId, 0);
        updateGlobalUnreadCount();
      }
    });

    // Sidebar toggle functionality
    const menuToggle = document.getElementById('menuToggle');
    const closeSidebar = document.getElementById('closeSidebar');
    const sidebar = document.getElementById('sidebar');
    const sidebarOverlay = document.getElementById('sidebarOverlay');

    menuToggle?.addEventListener('click', () => {
      sidebar.classList.add('open');
      sidebarOverlay.classList.add('open');
    });

    closeSidebar?.addEventListener('click', () => {
      sidebar.classList.remove('open');
      sidebarOverlay.classList.remove('open');
    });

    sidebarOverlay?.addEventListener('click', () => {
      sidebar.classList.remove('open');
      sidebarOverlay.classList.remove('open');
    });

    // Theme toggle functionality
    themeToggle?.addEventListener('click', toggleDarkMode);
    themeToggleMobile?.addEventListener('click', toggleDarkMode);

    // Notification prompt buttons
    enableNotificationsBtn?.addEventListener('click', () => {
      Notification.requestPermission().then(permission => {
        notificationPrompt.classList.add('hidden');
        if (permission === 'granted') {
          showToast('Notifications enabled!', 'success');
        }
      });
    });

    dismissPromptBtn?.addEventListener('click', () => {
      notificationPrompt.classList.add('hidden');
    });
  </script>
</body>

</html>
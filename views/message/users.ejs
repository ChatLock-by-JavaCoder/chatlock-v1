<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ChatLock Messenger</title>
  <meta name="description" content="Secure messaging platform with real-time chat capabilities">
  
  <!-- External Resources -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://code.jquery.com/jquery-3.6.4.min.js" integrity="sha256-oP6HI9z1XaZNBrJURtCoUT5SUnxFr8s3BzRl+cbzUq8=" crossorigin="anonymous"></script>
  <script src="/socket.io/socket.io.js"></script>

  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #e0e7ff;
      --secondary: #3f37c9;
      --dark: #1e1b4b;
      --light: #f8fafc;
      --gray: #94a3b8;
      --dark-gray: #64748b;
    }

    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--light);
      height: 100vh;
      overflow-x: hidden;
    }

    /* Sidebar Styles */
    .sidebar {
      width: 280px;
      transform: translateX(-100%);
      transition: transform 0.3s ease;
      position: fixed;
      height: 100vh;
      z-index: 1000;
      background-color: white;
    }

    .sidebar.open {
      transform: translateX(0);
      box-shadow: 8px 0 15px -3px rgba(0, 0, 0, 0.1);
    }

    .sidebar-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 999;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }

    .sidebar-overlay.open {
      opacity: 1;
      visibility: visible;
    }

    /* Notification Badge */
    .notification-badge {
      position: absolute;
      top: -6px;
      right: -6px;
      width: 18px;
      height: 18px;
      background-color: var(--primary);
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
      font-weight: bold;
    }

    /* Status Indicators */
    .online-status {
      color: #10b981;
    }

    .offline-status {
      color: var(--dark-gray);
    }

    /* Responsive Adjustments */
    @media (min-width: 768px) {
      .sidebar {
        transform: translateX(0) !important;
        position: static;
        width: 280px;
        box-shadow: none;
      }

      .sidebar-overlay {
        display: none;
      }

      .content {
        margin-left: 280px;
      }
    }

    /* Main Content Area */
    .main-content {
      padding-top: 56px;
    }

    /* User List Items */
    .user-item:hover {
      background-color: var(--primary-light);
    }

    /* Dropdown Menu */
    .dropdown-menu {
      display: none;
      max-height: 300px;
      overflow-y: auto;
      position: absolute;
      background: white;
      border: 1px solid #ccc;
      border-radius: 0.375rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      z-index: 50;
      min-width: 200px;
      right: 0;
    }

    .dropdown-item {
      padding: 0.75rem 1rem;
      border-bottom: 1px solid #eee;
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .dropdown-item:hover {
      background-color: #f8fafc;
    }

    .dropdown-item:last-child {
      border-bottom: none;
    }

    .notification-time {
      font-size: 0.75rem;
      color: var(--dark-gray);
    }

    /* Search Results */
    .search-results {
      position: absolute;
      width: 100%;
      max-height: 300px;
      overflow-y: auto;
      background: white;
      border: 1px solid #e2e8f0;
      border-radius: 0.375rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      z-index: 40;
      margin-top: 0.25rem;
      display: none;
    }

    .search-result-item {
      padding: 0.75rem 1rem;
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .search-result-item:hover {
      background-color: #f8fafc;
    }

    .no-results {
      padding: 0.75rem 1rem;
      color: var(--dark-gray);
      font-size: 0.875rem;
    }
  </style>
</head>

<body class="bg-gray-50">
  <!-- Mobile Header -->
  <header class="mobile-header md:hidden fixed top-0 left-0 right-0 bg-white shadow-sm z-50 p-4 flex justify-between items-center">
    <button id="menuToggle" class="text-gray-600 focus:outline-none">
      <i class="fas fa-bars text-xl"></i>
    </button>
    <h1 class="text-xl font-bold text-gray-800">Messages</h1>
    
    <div class="relative">
      <button id="notificationBtn" class="text-gray-600 focus:outline-none relative">
        <i class="fas fa-bell text-xl"></i>
        <span id="unreadCount" class="notification-badge" style="display: none;">0</span>
      </button>
      <div id="notificationList" class="dropdown-menu">
        <div class="p-3 border-b border-gray-200 flex justify-between items-center">
          <h3 class="font-medium text-gray-800">Notifications</h3>
          <button id="markDropdownRead" class="text-xs text-blue-500 hover:text-blue-700">Mark all as read</button>
        </div>
        <div id="notificationItems" class="divide-y divide-gray-100"></div>
      </div>
    </div>
  </header>

  <!-- Sidebar Overlay -->
  <div class="sidebar-overlay" id="sidebarOverlay"></div>

  <div class="flex main-content">
    <!-- Sidebar Navigation -->
    <aside class="sidebar fixed inset-y-0 left-0 w-64 bg-white shadow-lg z-50 md:static md:translate-x-0" id="sidebar">
      <div class="p-6 h-full flex flex-col">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-gray-800 flex items-center">
            <i class="fas fa-comment-dots text-blue-500 mr-2"></i> ChatLock
          </h2>
          <button id="closeSidebar" class="md:hidden text-gray-600 hover:text-gray-800 focus:outline-none">
            <i class="fas fa-times text-lg"></i>
          </button>
        </div>

        <div class="relative mb-6">
          <input type="text" id="userSearch" placeholder="Search users..."
            class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 text-sm">
          <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
          <div id="searchResults" class="search-results"></div>
        </div>

        <nav class="space-y-2 flex-1">
          <a href="#" class="flex items-center px-4 py-2 rounded-lg bg-blue-100 text-blue-600 font-medium hover:bg-blue-200 transition-colors">
            <i class="fas fa-inbox mr-3"></i> Inbox
            <span id="sidebarUnreadCount" class="ml-auto bg-blue-500 text-white text-xs px-2 py-1 rounded-full" style="display: none;">0</span>
          </a>
          <a href="#" class="flex items-center px-4 py-2 rounded-lg hover:bg-gray-100 text-gray-600 hover:text-gray-800 transition-colors">
            <i class="fas fa-star mr-3"></i> Starred
          </a>
        </nav>

        <button id="markAllReadButton" class="mt-4 w-full py-2 px-4 text-center bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none transition-colors">
          Mark All as Read
        </button>
      </div>
    </aside>

    <!-- Main Content Area -->
    <div class="content w-full p-4">
      <h2 class="text-xl font-semibold text-gray-700 mb-4">Your Messages</h2>
      <div id="userListContainer" class="space-y-2 overflow-y-auto max-h-[calc(100vh-150px)]">
        <% allUser.forEach(user => { %>
          <div class="user-item bg-white px-4 py-3 rounded-lg shadow-sm flex items-center space-x-4 hover:shadow-md transition-shadow">
            <a href="/api/v1/user/chat/<%= user._id %>" class="flex items-center space-x-4 w-full">
              <div class="user-avatar-container relative">
                <img src="<%= user.profilePic %>" alt="<%= user.username %>" class="w-12 h-12 rounded-full object-cover bg-gray-300">
                <% if (user.unreadCount > 0) { %>
                  <span class="notification-badge"><%= user.unreadCount %></span>
                <% } %>
              </div>
              <div>
                <div class="font-semibold text-gray-800">@<%= user.username %>
                  <% if (user.username === 'code_with_irfan') { %>
                    <span title="Verified" class="text-blue-500 ml-1"><i class="fas fa-check-circle"></i></span>
                  <% } %>
                </div>
                <p class="text-sm <%= user.isOnline === 1 ? 'online-status' : 'offline-status' %>">
                  <i class="fas fa-circle mr-1"></i><%= user.isOnline === 1 ? 'Online' : 'Offline' %>
                </p>
              </div>
            </a>
          </div>
        <% }) %>
      </div>
    </div>
  </div>

  <!-- Floating Action Button
  <button class="fab fixed bottom-4 right-4 bg-blue-500 text-white p-4 rounded-full shadow-lg hover:bg-blue-600 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50">
    <i class="fas fa-plus"></i>
  </button> -->

  <script>
    // Current user context
    const currentUserId = "<%= user._id %>";
    const socket = io("/ChatLock", { 
      auth: { token: currentUserId },
      transports: ['websocket']
    });

    // State management
    const userUnreadCounts = {};
    let currentChatUserId = null;
    let isUserInChat = false;
    let notifications = [];
    let allUsers = JSON.parse('<%- JSON.stringify(allUser) %>');

    // Initialize notification badges
    function initializeBadges() {
      allUsers.forEach(user => {
        if (user.unreadCount > 0) {
          userUnreadCounts[user._id] = user.unreadCount;
        }
      });
      updateGlobalUnreadCount();
    }

    /**
     * Checks if the user is currently in a chat view
     */
    function checkActiveChat() {
      const chatMatch = window.location.pathname.match(/\/chat\/([^\/]+)/);
      currentChatUserId = chatMatch ? chatMatch[1] : null;
      isUserInChat = currentChatUserId && currentChatUserId !== currentUserId;
    }

    /**
     * Updates the online/offline status for a user
     * @param {string} userId - The ID of the user
     * @param {boolean} isOnline - Online status
     */
    function updateUserStatus(userId, isOnline) {
      const userElement = document.querySelector(`a[href="/api/v1/user/chat/${userId}"]`);
      if (!userElement) return;

      const statusElement = userElement.querySelector('p.text-sm');
      if (statusElement) {
        statusElement.innerHTML = `<i class="fas fa-circle mr-1"></i>${isOnline ? 'Online' : 'Offline'}`;
        statusElement.className = `text-sm ${isOnline ? 'online-status' : 'offline-status'}`;
      }
    }

    /**
     * Updates the notification badge for a user
     * @param {string} userId - The ID of the user
     * @param {number} count - Unread message count
     */
    function updateUserBadge(userId, count) {
      const avatarContainer = document.querySelector(`a[href="/api/v1/user/chat/${userId}"] .user-avatar-container`);
      if (!avatarContainer) return;

      let badge = avatarContainer.querySelector('.notification-badge');
      
      if (count > 0) {
        if (!badge) {
          badge = document.createElement('span');
          badge.className = 'notification-badge';
          avatarContainer.appendChild(badge);
        }
        badge.textContent = count;
      } else if (badge) {
        badge.remove();
      }
    }

    /**
     * Shows a desktop notification for new messages
     * @param {object} data - Notification data
     */
    function showDesktopNotification(data) {
      if (!("Notification" in window)) return;
      
      if (Notification.permission === "granted") {
        new Notification(`${data.senderName} sent a message`, {
          body: data.preview,
          icon: data.senderAvatar,
        });
      } else if (Notification.permission !== "denied") {
        Notification.requestPermission().then(permission => {
          if (permission === "granted") {
            new Notification(`${data.senderName} sent a message`, {
              body: data.preview,
              icon: data.senderAvatar,
            });
          }
        });
      }
    }

    /**
     * Updates the global unread count display
     */
    function updateGlobalUnreadCount() {
      const globalBadge = document.getElementById('unreadCount');
      const sidebarBadge = document.getElementById('sidebarUnreadCount');
      
      if (globalBadge || sidebarBadge) {
        const total = Object.values(userUnreadCounts).reduce((a, b) => a + b, 0);
        
        if (globalBadge) {
          globalBadge.textContent = total;
          globalBadge.style.display = total > 0 ? 'flex' : 'none';
        }
        
        if (sidebarBadge) {
          sidebarBadge.textContent = total;
          sidebarBadge.style.display = total > 0 ? 'flex' : 'none';
        }
      }
    }

    /**
     * Renders notifications in the dropdown
     */
    async function renderNotifications() {
      try {
        const res = await fetch('/api/v1/user/notifications-all');
        const data = await res.json();
        
        if (data.success) {
          notifications = data.notifications;
          const container = document.getElementById('notificationItems');
          container.innerHTML = '';
          
          if (notifications.length === 0) {
            container.innerHTML = '<div class="p-4 text-center text-gray-500">No notifications</div>';
            return;
          }
          
          notifications.forEach(notification => {
            const item = document.createElement('div');
            item.className = 'dropdown-item';
            item.innerHTML = `
              <div class="flex items-start">
                <div class="flex-shrink-0 h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                  ${notification.senderDetails?.profilePic ? 
                    `<img src="${notification.senderDetails.profilePic}" alt="${notification.senderDetails.username}" class="h-full w-full rounded-full object-cover">` : 
                    `<i class="fas fa-user text-gray-500"></i>`}
                </div>
                <div class="ml-3 flex-1">
                  <p class="text-sm font-medium text-gray-900">${notification.senderDetails?.username || 'System'}</p>
                  <p class="text-sm text-gray-500">${notification.message}</p>
                  <p class="text-xs text-gray-400 mt-1">${formatTime(notification.createdAt)}</p>
                </div>
              </div>
            `;
            container.appendChild(item);
          });
        }
      } catch (err) {
        console.error('Error loading notifications:', err);
        const container = document.getElementById('notificationItems');
        container.innerHTML = '<div class="p-4 text-center text-gray-500">Error loading notifications</div>';
      }
    }

    /**
     * Formats timestamp to relative time
     */
    function formatTime(timestamp) {
      const now = new Date();
      const date = new Date(timestamp);
      const diffInSeconds = Math.floor((now - date) / 1000);
      
      if (diffInSeconds < 60) return 'Just now';
      if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
      if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
      return `${Math.floor(diffInSeconds / 86400)}d ago`;
    }

    /**
     * Searches users in real-time
     */
    function searchUsers(query) {
      const resultsContainer = document.getElementById('searchResults');
      resultsContainer.innerHTML = '';
      
      if (query.trim() === '') {
        resultsContainer.style.display = 'none';
        return;
      }
      
      const filteredUsers = allUsers.filter(user => 
        user.username.toLowerCase().includes(query.toLowerCase())
      );
      
      if (filteredUsers.length === 0) {
        resultsContainer.innerHTML = '<div class="no-results">No users found</div>';
        resultsContainer.style.display = 'block';
        return;
      }
      
      filteredUsers.forEach(user => {
        const item = document.createElement('div');
        item.className = 'search-result-item';
        item.innerHTML = `
          <div class="flex items-center">
            <img src="${user.profilePic}" alt="${user.username}" class="w-8 h-8 rounded-full mr-3 object-cover">
            <div>
              <div class="font-medium">@${user.username}</div>
              <div class="text-xs ${user.isOnline === 1 ? 'online-status' : 'offline-status'}">
                ${user.isOnline === 1 ? 'Online' : 'Offline'}
              </div>
            </div>
          </div>
        `;
        item.addEventListener('click', () => {
          window.location.href = `/api/v1/user/chat/${user._id}`;
        });
        resultsContainer.appendChild(item);
      });
      
      resultsContainer.style.display = 'block';
    }

    // Socket.IO Event Listeners
    socket.on("user_online", (userId) => updateUserStatus(userId, true));
    socket.on("user_offline", (userId) => updateUserStatus(userId, false));

    socket.on('new_message_notification', (data) => {
      checkActiveChat();
      
      if (!userUnreadCounts[data.senderId]) {
        userUnreadCounts[data.senderId] = 0;
      }

      if (!isUserInChat || data.senderId !== currentChatUserId) {
        userUnreadCounts[data.senderId]++;
        updateUserBadge(data.senderId, userUnreadCounts[data.senderId]);
        updateGlobalUnreadCount();

        // Add to notifications and re-render if dropdown is open
        notifications.unshift({
          senderDetails: {
            username: data.senderName,
            profilePic: data.senderAvatar
          },
          message: data.preview,
          createdAt: new Date().toISOString()
        });
        
        if (document.getElementById('notificationList').style.display === 'block') {
          renderNotifications();
        }

        if (!document.hasFocus()) {
          showDesktopNotification(data);
        }
      }
    });

    // DOM Event Listeners
    document.getElementById('markAllReadButton')?.addEventListener('click', async () => {
      try {
        const response = await fetch('/api/v1/user/notifications/mark-all-read', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (response.ok) {
          Object.keys(userUnreadCounts).forEach(id => {
            userUnreadCounts[id] = 0;
            updateUserBadge(id, 0);
          });

          updateGlobalUnreadCount();
          alert("All notifications marked as read!");
        } else {
          alert("Failed to mark notifications as read.");
        }
      } catch (err) {
        console.error("Error marking notifications as read:", err);
        alert("An error occurred while marking notifications as read.");
      }
    });

    document.getElementById('markDropdownRead')?.addEventListener('click', async (e) => {
      e.stopPropagation();
      try {
        const response = await fetch('/api/v1/user/notifications/mark-all-read', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (response.ok) {
          Object.keys(userUnreadCounts).forEach(id => {
            userUnreadCounts[id] = 0;
            updateUserBadge(id, 0);
          });

          updateGlobalUnreadCount();
          renderNotifications();
        }
      } catch (err) {
        console.error("Error marking notifications as read:", err);
      }
    });

    document.getElementById('notificationBtn')?.addEventListener('click', async (e) => {
      e.stopPropagation();
      const list = document.getElementById('notificationList');
      
      if (list.style.display === 'block') {
        list.style.display = 'none';
        return;
      }

      await renderNotifications();
      list.style.display = 'block';
    });

    // Search functionality
    document.getElementById('userSearch')?.addEventListener('input', (e) => {
      searchUsers(e.target.value);
    });

    // Close dropdowns when clicking elsewhere
    document.addEventListener('click', (e) => {
      if (!e.target.closest('#notificationBtn')) {
        document.getElementById('notificationList').style.display = 'none';
      }
      if (!e.target.closest('#userSearch')) {
        document.getElementById('searchResults').style.display = 'none';
      }
    });

    // Sidebar toggle functionality
    document.getElementById('menuToggle')?.addEventListener('click', () => {
      document.getElementById('sidebar').classList.add('open');
      document.getElementById('sidebarOverlay').classList.add('open');
    });

    document.getElementById('closeSidebar')?.addEventListener('click', () => {
      document.getElementById('sidebar').classList.remove('open');
      document.getElementById('sidebarOverlay').classList.remove('open');
    });

    document.getElementById('sidebarOverlay')?.addEventListener('click', () => {
      document.getElementById('sidebar').classList.remove('open');
      document.getElementById('sidebarOverlay').classList.remove('open');
    });

    // Initialize
    initializeBadges();
    checkActiveChat();
    window.addEventListener('focus', () => {
      if (currentChatUserId) {
        userUnreadCounts[currentChatUserId] = 0;
        updateUserBadge(currentChatUserId, 0);
        updateGlobalUnreadCount();
      }
    });
  </script>
</body>
</html>
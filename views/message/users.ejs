<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <title>Messenger</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://kit.fontawesome.com/a2e8b6d64f.js" crossorigin="anonymous"></script>
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #e0e7ff;
      --secondary: #3f37c9;
      --dark: #1e1b4b;
      --light: #f8fafc;
      --gray: #94a3b8;
      --dark-gray: #64748b;
    }

    html,
    body {
      height: 100%;
      overflow-x: hidden;
      font-family: 'Inter', sans-serif;
      background-color: var(--light);
    }

    .sidebar {
      width: 280px;
      transform: translateX(-100%);
      transition: transform 0.3s ease;
      position: fixed;
      height: 100vh;
      z-index: 1000;
      background-color: white;
    }

    .sidebar.open {
      transform: translateX(0);
      box-shadow: 8px 0 15px -3px rgba(0, 0, 0, 0.1);
    }

    .sidebar-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 999;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
    }

    .sidebar-overlay.open {
      opacity: 1;
      visibility: visible;
    }

    @media (min-width: 768px) {
      .sidebar {
        transform: translateX(0) !important;
        position: static;
        width: 280px;
        box-shadow: none;
      }

      .sidebar-overlay {
        display: none;
      }

      .content {
        margin-left: 280px;
      }
    }

    .main-content {
      padding-top: 56px;
    }

    .user-item:hover {
      background-color: var(--primary-light);
    }

    .notification-badge {
      position: absolute;
      top: -6px;
      right: -6px;
      width: 18px;
      height: 18px;
      background-color: #4361ee;
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
      font-weight: bold;
    }

    .user-avatar-container {
      position: relative;
      display: inline-block;
    }

    .online-status {
      color: #10b981;
    }

    .offline-status {
      color: #64748b;
    }
  </style>
</head>

<body class="bg-gray-50">
  <!-- Mobile Header -->
  <header class="mobile-header md:hidden fixed top-0 left-0 right-0 bg-white shadow-sm z-50 p-4 flex justify-between items-center">
    <button id="menuToggle" class="text-gray-600 ripple">
      <i class="fas fa-bars text-xl"></i>
    </button>
    <h1 class="text-xl font-bold text-gray-800">Messages</h1>
    <div class="relative">
      <button class="text-gray-600 ripple">
        <i class="fas fa-bell text-xl"></i>
        <% if (unreadCount > 0) { %>
          <span id="unreadCount" class="notification-badge"><%= unreadCount %></span>
        <% } %>
      </button>
    </div>
  </header>

  <div class="sidebar-overlay" id="sidebarOverlay"></div>

  <div class="flex main-content">
    <!-- Sidebar -->
    <aside class="sidebar" id="sidebar">
      <div class="p-6">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-gray-800 flex items-center">
            <i class="fas fa-comment-dots text-blue-500 mr-2"></i> Messenger
          </h2>
          <button id="closeSidebar" class="md:hidden text-gray-600 ripple">
            <i class="fas fa-times text-lg"></i>
          </button>
        </div>

        <div class="relative mb-6">
          <input type="text" placeholder="Search messages..."
            class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 text-sm">
          <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
        </div>

        <nav class="space-y-2">
          <a href="#" class="flex items-center px-4 py-2 rounded-lg bg-blue-100 text-blue-600 font-medium">
            <i class="fas fa-inbox mr-3"></i> Inbox
            <span class="ml-auto bg-blue-500 text-white text-xs px-2 py-1 rounded-full"><%= unreadCount %></span>
          </a>
          <a href="#" class="flex items-center px-4 py-2 rounded-lg hover:bg-gray-100">
            <i class="fas fa-star mr-3 text-gray-500"></i> Starred
          </a>
        </nav>
        <button id="markAllReadButton" class="mt-4 w-full py-2 px-4 text-center bg-blue-500 text-white rounded-lg hover:bg-blue-600">
          Mark All as Read
        </button>
      </div>
    </aside>

    <!-- Chat List Content -->
    <div class="content w-full p-4">
      <h2 class="text-xl font-semibold text-gray-700 mb-4">Your Messages</h2>
      <div class="user-list-container space-y-2 overflow-y-auto max-h-[calc(100vh-150px)]">
        <% allUser.forEach(user => { %>
          <div class="user-item bg-white px-4 py-3 rounded-lg shadow-sm flex items-center space-x-4">
            <a href="/api/v1/user/chat/<%= user._id %>" class="flex items-center space-x-4 w-full">
              <div class="user-avatar-container">
                <img src="<%= user.profilePic %>" alt="<%= user.username %>" class="w-12 h-12 rounded-full object-cover bg-gray-300">
                <% if (user.unreadCount > 0) { %>
                  <span class="notification-badge"><%= user.unreadCount %></span>
                <% } %>
              </div>
              <div>
                <div class="font-semibold text-gray-800">@<%= user.username %>
                  <% if (user.username === 'code_with_irfan') { %>
                    <span title="Verified" class="text-blue-500 ml-1">&#10003;</span>
                  <% } %>
                </div>
                <p class="text-sm <%= user.isOnline === 1 ? 'online-status' : 'offline-status' %>">
                  <%= user.isOnline === 1 ? 'Online' : 'Offline' %>
                </p>
              </div>
            </a>
          </div>
        <% }) %>
      </div>
    </div>
  </div>

  <!-- Floating Button -->
  <button class="fab fixed bottom-4 right-4 bg-blue-500 text-white p-4 rounded-full shadow-lg text-xl ripple">
    <i class="fas fa-plus"></i>
  </button>

  <!-- Scripts -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const currentUserId = "<%= user._id %>";
    const socket = io("/ChatLock", { auth: { token: currentUserId } });

    let isUserInChat = false;
    let currentChatUserId = null;
    const userUnreadCounts = {};

    function checkActiveChat() {
      const chatMatch = window.location.pathname.match(/\/chat\/([^\/]+)/);
      if (chatMatch) {
        currentChatUserId = chatMatch[1];
        isUserInChat = currentChatUserId !== currentUserId;
      } else {
        isUserInChat = false;
        currentChatUserId = null;
      }
    }

    function updateUserStatus(userId, isOnline) {
      const userElement = document.querySelector(`a[href="/api/v1/user/chat/${userId}"]`);
      if (!userElement) return;

      const statusText = userElement.querySelector('p.text-sm');
      if (statusText) {
        statusText.textContent = isOnline ? 'Online' : 'Offline';
        statusText.className = `text-sm ${isOnline ? 'online-status' : 'offline-status'}`;
      }
    }

    socket.on("user_online", (userId) => updateUserStatus(userId, true));
    socket.on("user_offline", (userId) => updateUserStatus(userId, false));

    function updateUserBadge(userId, count) {
      const avatarContainer = document.querySelector(`a[href="/api/v1/user/chat/${userId}"] .user-avatar-container`);
      if (!avatarContainer) return;

      let badge = avatarContainer.querySelector('.notification-badge');
      if (count > 0) {
        if (!badge) {
          badge = document.createElement('span');
          badge.className = 'notification-badge';
          avatarContainer.appendChild(badge);
        }
        badge.textContent = count;
      } else {
        if (badge) badge.remove();
      }
    }

    socket.on('new_message_notification', (data) => {
      checkActiveChat();
      if (!userUnreadCounts[data.senderId]) userUnreadCounts[data.senderId] = 0;

      if (!isUserInChat || data.senderId !== currentChatUserId) {
        userUnreadCounts[data.senderId]++;
        updateUserBadge(data.senderId, userUnreadCounts[data.senderId]);

        const globalBadge = document.getElementById('unreadCount');
        if (globalBadge) {
          const total = Object.values(userUnreadCounts).reduce((a, b) => a + b, 0);
          globalBadge.textContent = total;
          globalBadge.style.display = total > 0 ? 'flex' : 'none';
        }

        if (!document.hasFocus()) showDesktopNotification(data);
      }
    });

    function showDesktopNotification(data) {
      if (!("Notification" in window)) return;
      if (Notification.permission === "granted") {
        new Notification(`${data.senderName} sent a message`, {
          body: data.preview,
          icon: data.senderAvatar,
        });
      } else if (Notification.permission !== "denied") {
        Notification.requestPermission().then(permission => {
          if (permission === "granted") {
            new Notification(`${data.senderName} sent a message`, {
              body: data.preview,
              icon: data.senderAvatar,
            });
          }
        });
      }
    }

    document.getElementById('markAllReadButton').addEventListener('click', async () => {
      try {
        const response = await fetch('/api/v1/user/notifications/mark-all-read', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (response.ok) {
          Object.keys(userUnreadCounts).forEach(id => {
            userUnreadCounts[id] = 0;
            updateUserBadge(id, 0);
          });

          const globalBadge = document.getElementById('unreadCount');
          if (globalBadge) {
            globalBadge.textContent = '0';
            globalBadge.style.display = 'none';
          }

          alert("All notifications marked as read!");
        } else {
          alert("Failed to mark as read.");
        }
      } catch (err) {
        console.error("Error:", err);
      }
    });

    window.addEventListener('focus', () => {
      if (currentChatUserId) {
        userUnreadCounts[currentChatUserId] = 0;
        updateUserBadge(currentChatUserId, 0);
      }
    });

    checkActiveChat();

    // Sidebar toggle
    document.getElementById('menuToggle')?.addEventListener('click', () => {
      document.getElementById('sidebar').classList.add('open');
      document.getElementById('sidebarOverlay').classList.add('open');
    });

    document.getElementById('closeSidebar')?.addEventListener('click', () => {
      document.getElementById('sidebar').classList.remove('open');
      document.getElementById('sidebarOverlay').classList.remove('open');
    });

    document.getElementById('sidebarOverlay')?.addEventListener('click', () => {
      document.getElementById('sidebar').classList.remove('open');
      document.getElementById('sidebarOverlay').classList.remove('open');
    });
  </script>
</body>

</html>
